{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/bb.css","path":"css/bb.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","path":"medias/icp.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","path":"libs/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","path":"libs/minivaline/MiniValine.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","path":"libs/prism/prism.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js","path":"libs/twikoo/twikoo.all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","path":"libs/twikoo/twikoo.all.min.js.LICENSE.txt","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","path":"libs/awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","path":"libs/awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","path":"libs/awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","path":"libs/awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","path":"libs/awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","path":"libs/awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","path":"libs/awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","path":"libs/awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","path":"libs/awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"67443df10896f957c584971c882998736873c17a","modified":1614339695134},{"_id":"source/_posts/lodash.md","hash":"55f24fb566e293bd8a65ac6662d87db1890bed75","modified":1614339199417},{"_id":"source/_posts/js_basic/01-basic-info.md","hash":"eb3290828331dea7cf8fa50dcfdfa4b829d03606","modified":1614591068182},{"_id":"source/_posts/js_basic/02-js-copy.md","hash":"4cca955ad97fee25350d7c3aa7a27ddb98f26f81","modified":1614339199414},{"_id":"source/_posts/nodejs/01-Node简介.md","hash":"d2b452084edc284733e99d8ae5eba4474961077a","modified":1614586255198},{"_id":"themes/hexo-theme-matery/.gitignore","hash":"727607929a51db7ea10968f547c26041eee9cfff","modified":1614601213834},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1614601213834},{"_id":"themes/hexo-theme-matery/CHANGELOG.md","hash":"084ec8b110a20170d08a0aa5fd8accf601051835","modified":1614601213834},{"_id":"themes/hexo-theme-matery/README.md","hash":"0366f3d50b18d095b0581e7b5974e3283d693884","modified":1614601213834},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"a1e060bb4cf2ccca5cad12d02cc3c37f8028fdfb","modified":1614601213834},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"d130bec49c556282bdefe120469642bf9c0c3165","modified":1614601213835},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"a957b05f70265a86a87d922e18488571809d2472","modified":1614601213835},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"54ccc01b097c5bf6820f0edfcece1a87b78ab32d","modified":1614601213835},{"_id":"themes/hexo-theme-matery/layout/404.ejs","hash":"9c8ca67377211e5d60fdde272a975faa9a91a22a","modified":1614601213835},{"_id":"themes/hexo-theme-matery/languages/zh-HK.yml","hash":"ae34ac0e175c3037675722e436637efbceea32f0","modified":1614601213835},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"99a74316aed478efb0db823c4460ee2e660f101c","modified":1614601213848},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"00019bca11fb46477f22017cb1f5ad8444da0580","modified":1614601213849},{"_id":"themes/hexo-theme-matery/layout/bb.ejs","hash":"21959d702f17a3d98b716daf44c8b5eecd59c7c5","modified":1614601213848},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"cdac701de8370f9f3794a0eed4165983993a1ca7","modified":1614601213848},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1614601213849},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"51e5369ec6b017cc702a8d957fc052c59dd4c3d7","modified":1614601213849},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"cff60f87f69155707f3a33731c7fac945cf7cd93","modified":1614601213849},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"4bfb9e946a90724fc8a902efe404c7b20549a38c","modified":1614601213850},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"4dc6f08e7709cc04e886be72dbf0d06469f0effc","modified":1614601213850},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"90b5a4c1f70e4756db569c15a7c6cad0c77c4500","modified":1614601213850},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"cf9517aa6a0111355121f44615d6923e312283c7","modified":1614601213850},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"85a4b05bd8a6ad0f17ff2e97dae56949b379c204","modified":1614601213850},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1614601213852},{"_id":"themes/hexo-theme-matery/layout/_partial/background.ejs","hash":"aef6edeeb11209831a11d8c7f5d59992e2573335","modified":1614601213836},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"47ee36a042bb6d52bbe1d0f329637e8ffcf1d0aa","modified":1614601213835},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-push.ejs","hash":"2cebcc5ea3614d7f76ec36670e68050cbe611202","modified":1614601213836},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-analytics.ejs","hash":"3bbcdb474ca1dcad514bdc4b7763e17c55df04fd","modified":1614601213836},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"c35e4254ff0738878f65251a657b4fdcafc4b270","modified":1614601213836},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"02191109712f61c0e487b8f0b8466597181a9004","modified":1614601213836},{"_id":"themes/hexo-theme-matery/layout/_partial/changyan.ejs","hash":"cd919d31564e118c2ee8d5cbfb7d51ee6da15d82","modified":1614601213836},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"b2dc2c8b5ed56815e55cc2ea54a6dc4eeba2375d","modified":1614601213836},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"3be24e4c370671eda53bdfd99fb748f4a22948ba","modified":1614601213837},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"2aa8fbb04b046fa7679092a48372d7e036835dff","modified":1614601213837},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"3aeb581bd78ab8e15b858e4c44c03bcf92f20b9e","modified":1614601213837},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"59e38c70f3d8e7165e686e5e84a627835f4321b0","modified":1614601213838},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"f8438ac80df005934a330b029de292d26f0b6ecb","modified":1614601213837},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"90f6218512ef2eab63ada7ad2fc766ae635a2297","modified":1614601213837},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1614601213837},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"85f0ef1c390694a1661e77f44a3ed76555099385","modified":1614601213838},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1614601213838},{"_id":"themes/hexo-theme-matery/layout/_partial/minivaline.ejs","hash":"738b83cd90fe1b26971d803fc89c56193323da1e","modified":1614601213838},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"cb0cb452be1cd1857ba600f04025b506f3b6fc79","modified":1614601213839},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"78b70ff24b3039c871331ebec114b936c1756cc8","modified":1614601213839},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"e2df12cf92a82b1a7a7add2eac1db1d954bc5511","modified":1614601213839},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"d1c873c5de54498c722e155aadb8c0ec39485dfa","modified":1614601213839},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"3ff94aff01936242a9f4e1f31adb9b43bfab8d53","modified":1614601213839},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"7933979c2092654a9c1038ff30495505d7d88f2d","modified":1614601213840},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"04889f9031743c6b081d02fa4027b0dbfcc45ecf","modified":1614601213840},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"c76b78782ea82340104fccc089417572e0adece4","modified":1614601213840},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"0ce3f9361f558b99cc2f059c5e50b0e2a152ae38","modified":1614601213840},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"ffc55bc7e73bc698bfc58d8e3780c336b83282cf","modified":1614601213840},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"c941730a2471d6aab367cbb6e09ed08b56c83143","modified":1614601213841},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"150529c9fb9aa8ddb42ec3e02645d301faa2503b","modified":1614601213840},{"_id":"themes/hexo-theme-matery/layout/_widget/artitalk.ejs","hash":"b14e486f12b9ac42a273b80e4d785fcb94cf04b2","modified":1614601213841},{"_id":"themes/hexo-theme-matery/layout/_partial/twikoo.ejs","hash":"f9cb8c82b9d2a7cdb644e10718f1cdeb9400414c","modified":1614601213841},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"045f3aaade1dc6749a1f824b0405b5fdb9e041e4","modified":1614601213841},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"6f871bd3a70f720e4e451f1f4f625cbc6d8994a4","modified":1614601213841},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"1b3df1009234c0112424b497b18b4ad8240b3bc7","modified":1614601213842},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"9a472ad5591100cdb65d0df9d01034163bd6dd9d","modified":1614601213842},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"e9e3e327d5de9d7aeadbde32e1d558652d9e9195","modified":1614601213842},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"1d8747fda89a0b2ca3c7008867cbfeecad0578a6","modified":1614601213842},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"65a2d2f9722f84c7fd98f6bdf79087a14848ebd8","modified":1614601213842},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"89a0092df72d23093128f2fbbdc8ca7f83ebcfd9","modified":1614601213842},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"ef60b64021fa349b0048425d858dfcf6c906fede","modified":1614601213842},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"48821e644bc73553d7c5c56d2e8ee111a70cd776","modified":1614601213847},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"8551137e94ca4e2e3b8b63d5626255884cb60cb5","modified":1614601213847},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"fc42b72cddc231f7485cdc1fd6852b66be6add26","modified":1614601213847},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"ab5f986f428215941aeaa0c88aefd440c47d3bcf","modified":1614601213847},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"487aacb2454d6bf0d21cdb07ddd1fd5ddbca9038","modified":1614601213848},{"_id":"themes/hexo-theme-matery/source/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1614601213850},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"a0e002377af2a7f7e4da6d9a644de97adb035925","modified":1614601213848},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1614601213851},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1614601213851},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1614601213851},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"a630f6e8643904073dce9eada57b5c16c4dba5e2","modified":1614601213851},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1614601213852},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"e1482406c58ea2a0eb178d7e4efb2c879cdddc80","modified":1614601213852},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1614601213907},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1614601213921},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1614601213900},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1614601213921},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1614601213852},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1614601213853},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1614601213853},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1614601213853},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1614601213854},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1614601213875},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1614601213874},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1614601213875},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1614601213875},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1614601213875},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1614601213875},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1614601213876},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1614601213876},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1614601213877},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1614601213877},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1614601213883},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1614601213884},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1614601213885},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1614601213885},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1614601213885},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1614601213889},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1614601213892},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1614601213892},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1614601213892},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","hash":"62e5474893dece076534352f564ceabd6e088a5a","modified":1614601213892},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1614601213892},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1614601213895},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1614601213895},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"1e286a31ef472fb864fe2b9502e87df9242df56b","modified":1614601213898},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1614601213909},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1614601213910},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1614601213911},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1614601213912},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1614601213916},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1614601213917},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1614601213918},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1614601213918},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1614601213918},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1614601213919},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1614601213920},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1614601213920},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1614601213922},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1614601213922},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1614601213863},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1614601213864},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1614601213865},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1614601213865},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1614601213887},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1614601213887},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1614601213887},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1614601213887},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1614601213888},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1614601213888},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1614601213888},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1614601213888},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1614601213888},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1614601213893},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1614601213893},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1614601213893},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1614601213889},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1614601213894},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1614601213894},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1614601213894},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1614601213895},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1614601213878},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1614601213885},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1614601213886},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1614601213899},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1614601213901},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1614601213902},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1614601213903},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1614601213908},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1614601213909},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1614601213910},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1614601213910},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1614601213911},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1614601213915},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1614601213915},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1614601213916},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1614601213917},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1614601213919},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1614601213919},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1614601213921},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1614601213854},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1614601213856},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1614601213861},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1614601213862},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1614601213862},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1614601213874},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1614601213874},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1614601213908},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1614601213884},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1614601213891},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1614601213890},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1614601213900},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1614601213902},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1614601213905},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1614601213905},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1614601213864},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1614601213873},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1614601213867},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1614601213904},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1614601213898},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1614601213882},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1614601213860},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1614601213872},{"_id":"public/2021/03/01/nodejs/01-Node简介/index.html","hash":"3b4eb74e7cebedc140b22a41b239c5d2471e3c7f","modified":1614652882199},{"_id":"public/2021/03/01/js_basic/01-basic-info/index.html","hash":"b2e57b2c29ebda6ab7e0e74044deb6d673c43929","modified":1614652882199},{"_id":"public/2021/02/26/js_basic/02-js-copy/index.html","hash":"810c2fc76f72dd3fd7ba0e90bc63e199d0a8bfdf","modified":1614652882199},{"_id":"public/2021/02/24/lodash/index.html","hash":"94cdd72e7d918024362a218ec48c8ca3d8f1327f","modified":1614652882199},{"_id":"public/2021/02/23/hello-world/index.html","hash":"afa84190b647f859afc55649b9ec7b0e0d2aca91","modified":1614652882199},{"_id":"public/archives/index.html","hash":"6af7fd24005c0c7bff1e0ac7b5da3de1b70490da","modified":1614652882199},{"_id":"public/archives/2021/index.html","hash":"8328a72e9d8060d0c38a415b1412a79e7d450f4c","modified":1614652882199},{"_id":"public/archives/2021/02/index.html","hash":"be2a689bb21610a89712a42c8b0dd49ccb29587d","modified":1614652882199},{"_id":"public/archives/2021/03/index.html","hash":"9e29d78446ad40e72de0972b594e209541f94740","modified":1614652882199},{"_id":"public/index.html","hash":"f49cd16d4f5c41673cbf04741d2903a1f915d1ef","modified":1614652882199},{"_id":"public/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1614652882199},{"_id":"public/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1614652882199},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1614652882199},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1614652882199},{"_id":"public/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1614652882199},{"_id":"public/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"1e286a31ef472fb864fe2b9502e87df9242df56b","modified":1614652882199},{"_id":"public/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1614652882199},{"_id":"public/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1614652882199},{"_id":"public/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1614652882199},{"_id":"public/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1614652882199},{"_id":"public/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1614652882199},{"_id":"public/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1614652882199},{"_id":"public/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1614652882199},{"_id":"public/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1614652882199},{"_id":"public/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1614652882199},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1614652882199},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1614652882199},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1614652882199},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1614652882199},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1614652882199},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1614652882199},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1614652882199},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1614652882199},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1614652882199},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1614652882199},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1614652882199},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1614652882199},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1614652882199},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1614652882199},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1614652882199},{"_id":"public/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1614652882199},{"_id":"public/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1614652882199},{"_id":"public/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1614652882199},{"_id":"public/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1614652882199},{"_id":"public/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1614652882199},{"_id":"public/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1614652882199},{"_id":"public/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1614652882199},{"_id":"public/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1614652882199},{"_id":"public/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1614652882199},{"_id":"public/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1614652882199},{"_id":"public/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1614652882199},{"_id":"public/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1614652882199},{"_id":"public/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1614652882199},{"_id":"public/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1614652882199},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1614652882199},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1614652882199},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1614652882199},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1614652882199},{"_id":"public/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1614652882199},{"_id":"public/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1614652882199},{"_id":"public/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1614652882199},{"_id":"public/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1614652882199},{"_id":"public/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1614652882199},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1614652882199},{"_id":"public/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1614652882199},{"_id":"public/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1614652882199},{"_id":"public/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1614652882199},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1614652882199},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1614652882199},{"_id":"public/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1614652882199},{"_id":"public/js/search.js","hash":"e1482406c58ea2a0eb178d7e4efb2c879cdddc80","modified":1614652882199},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1614652882199},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1614652882199},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1614652882199},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1614652882199},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1614652882199},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1614652882199},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1614652882199},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1614652882199},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1614652882199},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1614652882199},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1614652882199},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1614652882199},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1614652882199},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1614652882199},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1614652882199},{"_id":"public/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1614652882199},{"_id":"public/libs/prism/prism.css","hash":"62e5474893dece076534352f564ceabd6e088a5a","modified":1614652882199},{"_id":"public/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1614652882199},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1614652882199},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1614652882199},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1614652882199},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1614652882199},{"_id":"public/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1614652882199},{"_id":"public/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1614652882199},{"_id":"public/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1614652882199},{"_id":"public/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1614652882199},{"_id":"public/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1614652882199},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1614652882199},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1614652882199},{"_id":"public/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1614652882199},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1614652882199},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1614652882199},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1614652882199},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1614652882199},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1614652882199},{"_id":"public/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1614652882199},{"_id":"public/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1614652882199},{"_id":"public/css/matery.css","hash":"a630f6e8643904073dce9eada57b5c16c4dba5e2","modified":1614652882199},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1614652882199},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1614652882199},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1614652882199},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1614652882199},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1614652882199},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1614652882199},{"_id":"public/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1614652882199},{"_id":"public/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1614652882199},{"_id":"public/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1614652882199},{"_id":"public/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1614652882199},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1614652882199},{"_id":"public/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1614652882199},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1614652882199},{"_id":"public/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1614652882199},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1614652882199},{"_id":"public/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1614652882199},{"_id":"public/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1614652882199},{"_id":"public/libs/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1614652882199},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1614652882199}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"### hello world\n\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\n### hello world\n\n","slug":"hello-world","published":1,"date":"2021-02-23T12:41:33.294Z","updated":"2021-02-26T11:41:35.134Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklremxpd0000ndvp1y697buq","content":"<h3><span id=\"hello-world\">hello world</span></h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"hello-world\"><a href=\"#hello-world\" class=\"headerlink\" title=\"hello world\"></a>hello world</h3>"},{"title":"lodash","_content":"\n敬请期待\n\n","source":"_posts/lodash.md","raw":"---\ntitle: lodash\n---\n\n敬请期待\n\n","slug":"lodash","published":1,"date":"2021-02-24T03:22:30.831Z","updated":"2021-02-26T11:33:19.417Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklremxpj0001ndvpfv4aemry","content":"<p>敬请期待</p>\n","site":{"data":{}},"excerpt":"","more":"<p>敬请期待</p>\n"},{"title":"基础知识","_content":"\n## 1、0.1+0.2为什么不等于0.3\nJavaScript使用Number类型表示数字（整数和浮点数)，遵循 IEEE 754 标准，通过64位来表示一个数字。\nJS中1位符号位，11位的指数e,剩余52位是尾数。\njs最大安全数是 Number.MAX_SAFE_INTEGER == Math.pow(2,53) - 1。本来应该是Math.pow(2,52)-1，但是二进制表示的有效数字总是1.xxx。\n计算机无法计算10进制，因此会先按照IEEE 754转换成二进制进行运算。\n浮点数运算的五个步骤：对阶、尾数运算、规格化、舍入处理、溢出判断\n1、0.1和0.2在转化为二进制后，都是无限循环小数，只能保留52位，会有精度损失\n2、在运算时，需要对阶，一般是小阶对大阶，这一步也可能丢失进度，\n3、对阶后进行尾数运算，相加后得到可结果，如果结果的整数部分超过1，需要进行规格化\n4、规格化之后如果小数部分超出52位，需要再次摄入处理\n5、0.1+0.2不涉及溢出判断，直接将结果转为10进制\n\n## 2、[1]==[1]为什么为false\n引用类型的比较，是数组堆内存的地址的比较，两个数组在堆内存中地址是不同的。\n\n## 3、如何将值类型的变量以引用的方式传递\n```angular2\nvar str = \"abcd\";        //基本类型\nvar obj = {\"str\":str};   //引用类型\nvar boj2 = obj;          //复制引用地址\nconsole.log(boj2.str);   //abcd\nobj.str = \"bcd\";\nconsole.log(boj2.str);   //bcd\n```\n## 4、const定义的Array中间元素是否可以被修改？如果可以，那么const修饰对象有什么意义\nconst定义的Array中间元素可以被修改，const定义的变量保存的是Array的地址，这个变量本身不可以修改，而存在于堆内存的Array本身是可以修改的。\n对于const声明，只是它的赋值操作被冻结了，而值不会因为const而不变。主要是预防在coding过程中的coder因为疏忽对变量的意外修改。\n## 5、null与undefined的区别\nnull表示\"没有对象\"，此处不该有值\n\n典型用法\n - 作为函数的参数，表示该函数的参数不是对象\n - 作为对象原型链的终点\n\nundefined表示\"缺少值\"，此处该有值，但是还未定义\n - 变量被声明了，但是没有赋值，就是undefined\n - 调用函数时，应该提供的参数没有提供，该参数等于undefined\n - 对象没有赋值的属性，该属性的值为undefined\n - 函数没有返回值时，默认返回undefined \n\n要比较相等性之前，不能将 null 和 undefined 转换成其他任何值，它们就是相等的，在ECMAScript规范中也是这样定义的。\n## 6. ==和===的操作流程\n这两个操作符都会先转换操作，再比较它们的相等性\n转化基本规则\n1. 如果有一个操作数是布尔值，则在比较相等性之前现将其转换为数值-false转换为0，true转换为1\n2. 如果有一个操作数是字符串，另一个操作数是数值，在比较相等性之前先将字符串转换为数值\n3. 如果一个操作数是对象，另一个操作数不是，则调用对象valueOf( )方法，用得到的基本类型值按照前面的规则进行比较\n4. 如果一个操作数是布尔值，另一个操作数是字符串，会把双方转换为数字，再进行比较\n\n比较时遵循规则：\n1. null和undefined相等\n2. 比较相等性之前，不能把null和undefined转换成任何其他值\n3. 如果有一个操作数是NaN，一定返回false，包括NaN==NaN\n4. 如果两个操作数都是对象，则比较它们是不是同一个对象","source":"_posts/js_basic/01-basic-info.md","raw":"---\ntitle: 基础知识\n---\n\n## 1、0.1+0.2为什么不等于0.3\nJavaScript使用Number类型表示数字（整数和浮点数)，遵循 IEEE 754 标准，通过64位来表示一个数字。\nJS中1位符号位，11位的指数e,剩余52位是尾数。\njs最大安全数是 Number.MAX_SAFE_INTEGER == Math.pow(2,53) - 1。本来应该是Math.pow(2,52)-1，但是二进制表示的有效数字总是1.xxx。\n计算机无法计算10进制，因此会先按照IEEE 754转换成二进制进行运算。\n浮点数运算的五个步骤：对阶、尾数运算、规格化、舍入处理、溢出判断\n1、0.1和0.2在转化为二进制后，都是无限循环小数，只能保留52位，会有精度损失\n2、在运算时，需要对阶，一般是小阶对大阶，这一步也可能丢失进度，\n3、对阶后进行尾数运算，相加后得到可结果，如果结果的整数部分超过1，需要进行规格化\n4、规格化之后如果小数部分超出52位，需要再次摄入处理\n5、0.1+0.2不涉及溢出判断，直接将结果转为10进制\n\n## 2、[1]==[1]为什么为false\n引用类型的比较，是数组堆内存的地址的比较，两个数组在堆内存中地址是不同的。\n\n## 3、如何将值类型的变量以引用的方式传递\n```angular2\nvar str = \"abcd\";        //基本类型\nvar obj = {\"str\":str};   //引用类型\nvar boj2 = obj;          //复制引用地址\nconsole.log(boj2.str);   //abcd\nobj.str = \"bcd\";\nconsole.log(boj2.str);   //bcd\n```\n## 4、const定义的Array中间元素是否可以被修改？如果可以，那么const修饰对象有什么意义\nconst定义的Array中间元素可以被修改，const定义的变量保存的是Array的地址，这个变量本身不可以修改，而存在于堆内存的Array本身是可以修改的。\n对于const声明，只是它的赋值操作被冻结了，而值不会因为const而不变。主要是预防在coding过程中的coder因为疏忽对变量的意外修改。\n## 5、null与undefined的区别\nnull表示\"没有对象\"，此处不该有值\n\n典型用法\n - 作为函数的参数，表示该函数的参数不是对象\n - 作为对象原型链的终点\n\nundefined表示\"缺少值\"，此处该有值，但是还未定义\n - 变量被声明了，但是没有赋值，就是undefined\n - 调用函数时，应该提供的参数没有提供，该参数等于undefined\n - 对象没有赋值的属性，该属性的值为undefined\n - 函数没有返回值时，默认返回undefined \n\n要比较相等性之前，不能将 null 和 undefined 转换成其他任何值，它们就是相等的，在ECMAScript规范中也是这样定义的。\n## 6. ==和===的操作流程\n这两个操作符都会先转换操作，再比较它们的相等性\n转化基本规则\n1. 如果有一个操作数是布尔值，则在比较相等性之前现将其转换为数值-false转换为0，true转换为1\n2. 如果有一个操作数是字符串，另一个操作数是数值，在比较相等性之前先将字符串转换为数值\n3. 如果一个操作数是对象，另一个操作数不是，则调用对象valueOf( )方法，用得到的基本类型值按照前面的规则进行比较\n4. 如果一个操作数是布尔值，另一个操作数是字符串，会把双方转换为数字，再进行比较\n\n比较时遵循规则：\n1. null和undefined相等\n2. 比较相等性之前，不能把null和undefined转换成任何其他值\n3. 如果有一个操作数是NaN，一定返回false，包括NaN==NaN\n4. 如果两个操作数都是对象，则比较它们是不是同一个对象","slug":"js_basic/01-basic-info","published":1,"date":"2021-03-01T08:10:55.197Z","updated":"2021-03-01T09:31:08.182Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklremxpk0002ndvp0rvvc51q","content":"<h2><span id=\"1-0102为什么不等于03\">1、0.1+0.2为什么不等于0.3</span></h2><p>JavaScript使用Number类型表示数字（整数和浮点数)，遵循 IEEE 754 标准，通过64位来表示一个数字。<br>JS中1位符号位，11位的指数e,剩余52位是尾数。<br>js最大安全数是 Number.MAX_SAFE_INTEGER == Math.pow(2,53) - 1。本来应该是Math.pow(2,52)-1，但是二进制表示的有效数字总是1.xxx。<br>计算机无法计算10进制，因此会先按照IEEE 754转换成二进制进行运算。<br>浮点数运算的五个步骤：对阶、尾数运算、规格化、舍入处理、溢出判断<br>1、0.1和0.2在转化为二进制后，都是无限循环小数，只能保留52位，会有精度损失<br>2、在运算时，需要对阶，一般是小阶对大阶，这一步也可能丢失进度，<br>3、对阶后进行尾数运算，相加后得到可结果，如果结果的整数部分超过1，需要进行规格化<br>4、规格化之后如果小数部分超出52位，需要再次摄入处理<br>5、0.1+0.2不涉及溢出判断，直接将结果转为10进制</p>\n<h2><span id=\"2-11为什么为false\">2、[1]==[1]为什么为false</span></h2><p>引用类型的比较，是数组堆内存的地址的比较，两个数组在堆内存中地址是不同的。</p>\n<h2><span id=\"3-如何将值类型的变量以引用的方式传递\">3、如何将值类型的变量以引用的方式传递</span></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str &#x3D; &quot;abcd&quot;;        &#x2F;&#x2F;基本类型</span><br><span class=\"line\">var obj &#x3D; &#123;&quot;str&quot;:str&#125;;   &#x2F;&#x2F;引用类型</span><br><span class=\"line\">var boj2 &#x3D; obj;          &#x2F;&#x2F;复制引用地址</span><br><span class=\"line\">console.log(boj2.str);   &#x2F;&#x2F;abcd</span><br><span class=\"line\">obj.str &#x3D; &quot;bcd&quot;;</span><br><span class=\"line\">console.log(boj2.str);   &#x2F;&#x2F;bcd</span><br></pre></td></tr></table></figure>\n<h2><span id=\"4-const定义的array中间元素是否可以被修改如果可以那么const修饰对象有什么意义\">4、const定义的Array中间元素是否可以被修改？如果可以，那么const修饰对象有什么意义</span></h2><p>const定义的Array中间元素可以被修改，const定义的变量保存的是Array的地址，这个变量本身不可以修改，而存在于堆内存的Array本身是可以修改的。<br>对于const声明，只是它的赋值操作被冻结了，而值不会因为const而不变。主要是预防在coding过程中的coder因为疏忽对变量的意外修改。</p>\n<h2><span id=\"5-null与undefined的区别\">5、null与undefined的区别</span></h2><p>null表示”没有对象”，此处不该有值</p>\n<p>典型用法</p>\n<ul>\n<li>作为函数的参数，表示该函数的参数不是对象</li>\n<li>作为对象原型链的终点</li>\n</ul>\n<p>undefined表示”缺少值”，此处该有值，但是还未定义</p>\n<ul>\n<li>变量被声明了，但是没有赋值，就是undefined</li>\n<li>调用函数时，应该提供的参数没有提供，该参数等于undefined</li>\n<li>对象没有赋值的属性，该属性的值为undefined</li>\n<li>函数没有返回值时，默认返回undefined </li>\n</ul>\n<p>要比较相等性之前，不能将 null 和 undefined 转换成其他任何值，它们就是相等的，在ECMAScript规范中也是这样定义的。</p>\n<h2><span id=\"6-和的操作流程\">6. ==和===的操作流程</span></h2><p>这两个操作符都会先转换操作，再比较它们的相等性<br>转化基本规则</p>\n<ol>\n<li>如果有一个操作数是布尔值，则在比较相等性之前现将其转换为数值-false转换为0，true转换为1</li>\n<li>如果有一个操作数是字符串，另一个操作数是数值，在比较相等性之前先将字符串转换为数值</li>\n<li>如果一个操作数是对象，另一个操作数不是，则调用对象valueOf( )方法，用得到的基本类型值按照前面的规则进行比较</li>\n<li>如果一个操作数是布尔值，另一个操作数是字符串，会把双方转换为数字，再进行比较</li>\n</ol>\n<p>比较时遵循规则：</p>\n<ol>\n<li>null和undefined相等</li>\n<li>比较相等性之前，不能把null和undefined转换成任何其他值</li>\n<li>如果有一个操作数是NaN，一定返回false，包括NaN==NaN</li>\n<li>如果两个操作数都是对象，则比较它们是不是同一个对象</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1、0-1-0-2为什么不等于0-3\"><a href=\"#1、0-1-0-2为什么不等于0-3\" class=\"headerlink\" title=\"1、0.1+0.2为什么不等于0.3\"></a>1、0.1+0.2为什么不等于0.3</h2><p>JavaScript使用Number类型表示数字（整数和浮点数)，遵循 IEEE 754 标准，通过64位来表示一个数字。<br>JS中1位符号位，11位的指数e,剩余52位是尾数。<br>js最大安全数是 Number.MAX_SAFE_INTEGER == Math.pow(2,53) - 1。本来应该是Math.pow(2,52)-1，但是二进制表示的有效数字总是1.xxx。<br>计算机无法计算10进制，因此会先按照IEEE 754转换成二进制进行运算。<br>浮点数运算的五个步骤：对阶、尾数运算、规格化、舍入处理、溢出判断<br>1、0.1和0.2在转化为二进制后，都是无限循环小数，只能保留52位，会有精度损失<br>2、在运算时，需要对阶，一般是小阶对大阶，这一步也可能丢失进度，<br>3、对阶后进行尾数运算，相加后得到可结果，如果结果的整数部分超过1，需要进行规格化<br>4、规格化之后如果小数部分超出52位，需要再次摄入处理<br>5、0.1+0.2不涉及溢出判断，直接将结果转为10进制</p>\n<h2 id=\"2、-1-1-为什么为false\"><a href=\"#2、-1-1-为什么为false\" class=\"headerlink\" title=\"2、[1]==[1]为什么为false\"></a>2、[1]==[1]为什么为false</h2><p>引用类型的比较，是数组堆内存的地址的比较，两个数组在堆内存中地址是不同的。</p>\n<h2 id=\"3、如何将值类型的变量以引用的方式传递\"><a href=\"#3、如何将值类型的变量以引用的方式传递\" class=\"headerlink\" title=\"3、如何将值类型的变量以引用的方式传递\"></a>3、如何将值类型的变量以引用的方式传递</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str &#x3D; &quot;abcd&quot;;        &#x2F;&#x2F;基本类型</span><br><span class=\"line\">var obj &#x3D; &#123;&quot;str&quot;:str&#125;;   &#x2F;&#x2F;引用类型</span><br><span class=\"line\">var boj2 &#x3D; obj;          &#x2F;&#x2F;复制引用地址</span><br><span class=\"line\">console.log(boj2.str);   &#x2F;&#x2F;abcd</span><br><span class=\"line\">obj.str &#x3D; &quot;bcd&quot;;</span><br><span class=\"line\">console.log(boj2.str);   &#x2F;&#x2F;bcd</span><br></pre></td></tr></table></figure>\n<h2 id=\"4、const定义的Array中间元素是否可以被修改？如果可以，那么const修饰对象有什么意义\"><a href=\"#4、const定义的Array中间元素是否可以被修改？如果可以，那么const修饰对象有什么意义\" class=\"headerlink\" title=\"4、const定义的Array中间元素是否可以被修改？如果可以，那么const修饰对象有什么意义\"></a>4、const定义的Array中间元素是否可以被修改？如果可以，那么const修饰对象有什么意义</h2><p>const定义的Array中间元素可以被修改，const定义的变量保存的是Array的地址，这个变量本身不可以修改，而存在于堆内存的Array本身是可以修改的。<br>对于const声明，只是它的赋值操作被冻结了，而值不会因为const而不变。主要是预防在coding过程中的coder因为疏忽对变量的意外修改。</p>\n<h2 id=\"5、null与undefined的区别\"><a href=\"#5、null与undefined的区别\" class=\"headerlink\" title=\"5、null与undefined的区别\"></a>5、null与undefined的区别</h2><p>null表示”没有对象”，此处不该有值</p>\n<p>典型用法</p>\n<ul>\n<li>作为函数的参数，表示该函数的参数不是对象</li>\n<li>作为对象原型链的终点</li>\n</ul>\n<p>undefined表示”缺少值”，此处该有值，但是还未定义</p>\n<ul>\n<li>变量被声明了，但是没有赋值，就是undefined</li>\n<li>调用函数时，应该提供的参数没有提供，该参数等于undefined</li>\n<li>对象没有赋值的属性，该属性的值为undefined</li>\n<li>函数没有返回值时，默认返回undefined </li>\n</ul>\n<p>要比较相等性之前，不能将 null 和 undefined 转换成其他任何值，它们就是相等的，在ECMAScript规范中也是这样定义的。</p>\n<h2 id=\"6-和-的操作流程\"><a href=\"#6-和-的操作流程\" class=\"headerlink\" title=\"6. ==和===的操作流程\"></a>6. ==和===的操作流程</h2><p>这两个操作符都会先转换操作，再比较它们的相等性<br>转化基本规则</p>\n<ol>\n<li>如果有一个操作数是布尔值，则在比较相等性之前现将其转换为数值-false转换为0，true转换为1</li>\n<li>如果有一个操作数是字符串，另一个操作数是数值，在比较相等性之前先将字符串转换为数值</li>\n<li>如果一个操作数是对象，另一个操作数不是，则调用对象valueOf( )方法，用得到的基本类型值按照前面的规则进行比较</li>\n<li>如果一个操作数是布尔值，另一个操作数是字符串，会把双方转换为数字，再进行比较</li>\n</ol>\n<p>比较时遵循规则：</p>\n<ol>\n<li>null和undefined相等</li>\n<li>比较相等性之前，不能把null和undefined转换成任何其他值</li>\n<li>如果有一个操作数是NaN，一定返回false，包括NaN==NaN</li>\n<li>如果两个操作数都是对象，则比较它们是不是同一个对象</li>\n</ol>\n"},{"title":"JS数组的深拷贝与浅拷贝","_content":"### js数据类型\njs数据类型包含基本数据类型(String,Number,Boolean,Null,Undefined)和引用数据类型(Array,Object,Function)\n### 堆内存和栈内存\n1、栈内存中存放的是存储对象的地址，而堆内存中存放的是存储对象的具体内容。\n2、基本数据类型的地址和具体值都存在于栈内存中，引用数据类型的地址存在于栈内存中，而具体内容存在在堆内存中。\n3、栈内存运行效率比堆内存高，空间相对堆内存来说较小。所以将构造简单的原始类型值放在栈内存中，将构造复杂的引用类型值放在堆中而不影响栈的效率。\n### 浅拷贝与深拷贝\n浅拷贝：复制一份引用，所有引用对象都指向一份数据，且都可以修改这份数据。\n深拷贝：复制变量值，对于非基本类型的变量，则递归至基本类型变量后，再复制。\n### 浅拷贝\n#### 数组的浅拷贝\n```angular2html\nlet arr1 = [1,2,3];\nlet arr2 = arr1;\narr1[0] = 2;\nconsole.log(arr1[0]);  //2\n```\n#### 对象的浅拷贝\n方式1：\n```\nlet srcObj = {'name': 'lilei', 'age': '20'};\nlet copyObj = srcObj;\ncopyObj.age = '22';\nconsole.log('srcObj', srcObj);   // srcObj { name: 'lilei', age: '22' }\nconsole.log('copyObj', copyObj);  // copyObj { name: 'lilei', age: '22' }\n```\n方式2：Object.assign\n可以处理对象属性为简单类型的深拷贝\n```angular2html\nlet srcObj = {'name': 'lilei', 'age': '20'};\nlet copyObj2 = Object.assign({}, srcObj, {'age': '21'});\ncopyObj2.age = '23';\nconsole.log('srcObj', srcObj); //{ name: 'lilei', age: '20' }\n```\n不能处理对象属性为引用类型，则那对于这个对象而言其实是浅拷贝的\n```\nvar obj = { a: {a: \"hello\", b: 21} };\nvar initalObj = Object.assign({}, obj);\ninitalObj.a.a = \"changed\";\nconsole.log(obj.a.a); // \"changed\"\n```\n### 深拷贝\n#### 数组深拷贝\n方式1：直接遍历赋值\n```angular2html\nvar arr1 = [1,3,5];\nvar arr2 = [];\narr1.forEach(function(value,index){\narr2[index] = value;\n})\nconsole.log(arr2);\n//这个时候改变arr1[0]  = 3;那么输出arr2[0]还是等于1\n```\n方式2：使用slice方法\n```angular2html\nvar arr1 = [1,2,3];\nvar arr2 = arr1.slice(0);\nconsole.log(arr2); //[1,2,3]\n```\n方式3：使用concat方法\n```angular2html\nvar arr1 = [1,2,3];\nvar arr2 = arr1.concat();\nconsole.log(arr2); //[1,2,3]\n```\n方式4：使用map方法\n```\nvar arr1 = [2,3,4];\nvar arr2 = arr1.map(function(value){\nreturn value;  \n})\nconsole.log(arr2);  //[2,3,4]\n```\n方式5：ES6扩展运算符\n```angular2html\n  var arr = [1,2,3,4,5];\n  var [ ... arr2 ] = arr;\n  console.log(arr); //[1,2,3,4,5]\n  console.log(arr2); //[1,2,3,4,5]\n```\n方式6：for-in连原型链也一并复制的方法\n```angular2html\nvar arr = [1,2,3,4,5];\narr.prototype = 5;\nvar arr2 = [];\nfor(var a in arr) {\n  arr2[a] = arr[a];\n}\nconsole.log(arr2); // [1,2,3,4,5]\nconsole.log(arr2.prototype); // 5\n//之前的方法中新数组的prototype都是undefined\n```\n多维数组的深拷贝\n```angular2html\nvar arr = [[1,2],3,4,[5,6]];\nvar arr3 = JSON.parse(JSON.stringify(arr));  \nconsole.log(arr3) // [[1,2],3,4,[5,6]]\n```\n#### 对象深拷贝\n方式1：手动复制\n```angular2html\nvar obj1 = { a: 10, b: 20, c: 30 };\nvar obj2 = { a: obj1.a, b: obj1.b, c: obj1.c };\nobj2.b = 100;\nconsole.log(obj1);\n// { a: 10, b: 20, c: 30 } // 沒被改到\nconsole.log(obj2);\n// { a: 10, b: 100, c: 30 }\n```\n方式2：JSON做字符串转换\n```angular2html\nvar obj1 = { body: { a: 10 } };\nvar obj2 = JSON.parse(JSON.stringify(obj1));\nobj2.body.a = 20;\nconsole.log(obj1);\n// { body: { a: 10 } }\nconsole.log(obj2);\n// { body: { a: 20 } }\nconsole.log(obj1 === obj2);\n// false\nconsole.log(obj1.body === obj2.body);\n```\n备注：这种方式简单易用，但是会抛弃对象的constructor，无论之前的构造函数是什么，拷贝后都是Object\n这种方法能正确处理的对象只有Number, String, Boolean, Array, 扁平对象，即那些能够被json直接表示的数据结构。RegExp对象是无法通过这种方式深拷贝。\n也就是说，只有可以转成JSON格式的对象才可以这样用，像function没办法转成JSON。\n方式3：递归拷贝\n```angular2html\nfunction deepClone(initalObj, finalObj) {    \n  var obj = finalObj || {};    \n  for (var i in initalObj) {        \n    var prop = initalObj[i];        // 避免相互引用对象导致死循环，如initalObj.a = initalObj的情况\n    if(prop === obj) {            \n      continue;\n    }        \n    if (typeof prop === 'object') {\n      obj[i] = (prop.constructor === Array) ? [] : {};            \n      arguments.callee(prop, obj[i]);\n    } else {\n      obj[i] = prop;\n    }\n  }    \n  return obj;\n}\nvar str = {};\nvar obj = { a: {a: \"hello\", b: 21} };\ndeepClone(obj, str);\nconsole.log(str.a);\n```","source":"_posts/js_basic/02-js-copy.md","raw":"---\ntitle: JS数组的深拷贝与浅拷贝\n---\n### js数据类型\njs数据类型包含基本数据类型(String,Number,Boolean,Null,Undefined)和引用数据类型(Array,Object,Function)\n### 堆内存和栈内存\n1、栈内存中存放的是存储对象的地址，而堆内存中存放的是存储对象的具体内容。\n2、基本数据类型的地址和具体值都存在于栈内存中，引用数据类型的地址存在于栈内存中，而具体内容存在在堆内存中。\n3、栈内存运行效率比堆内存高，空间相对堆内存来说较小。所以将构造简单的原始类型值放在栈内存中，将构造复杂的引用类型值放在堆中而不影响栈的效率。\n### 浅拷贝与深拷贝\n浅拷贝：复制一份引用，所有引用对象都指向一份数据，且都可以修改这份数据。\n深拷贝：复制变量值，对于非基本类型的变量，则递归至基本类型变量后，再复制。\n### 浅拷贝\n#### 数组的浅拷贝\n```angular2html\nlet arr1 = [1,2,3];\nlet arr2 = arr1;\narr1[0] = 2;\nconsole.log(arr1[0]);  //2\n```\n#### 对象的浅拷贝\n方式1：\n```\nlet srcObj = {'name': 'lilei', 'age': '20'};\nlet copyObj = srcObj;\ncopyObj.age = '22';\nconsole.log('srcObj', srcObj);   // srcObj { name: 'lilei', age: '22' }\nconsole.log('copyObj', copyObj);  // copyObj { name: 'lilei', age: '22' }\n```\n方式2：Object.assign\n可以处理对象属性为简单类型的深拷贝\n```angular2html\nlet srcObj = {'name': 'lilei', 'age': '20'};\nlet copyObj2 = Object.assign({}, srcObj, {'age': '21'});\ncopyObj2.age = '23';\nconsole.log('srcObj', srcObj); //{ name: 'lilei', age: '20' }\n```\n不能处理对象属性为引用类型，则那对于这个对象而言其实是浅拷贝的\n```\nvar obj = { a: {a: \"hello\", b: 21} };\nvar initalObj = Object.assign({}, obj);\ninitalObj.a.a = \"changed\";\nconsole.log(obj.a.a); // \"changed\"\n```\n### 深拷贝\n#### 数组深拷贝\n方式1：直接遍历赋值\n```angular2html\nvar arr1 = [1,3,5];\nvar arr2 = [];\narr1.forEach(function(value,index){\narr2[index] = value;\n})\nconsole.log(arr2);\n//这个时候改变arr1[0]  = 3;那么输出arr2[0]还是等于1\n```\n方式2：使用slice方法\n```angular2html\nvar arr1 = [1,2,3];\nvar arr2 = arr1.slice(0);\nconsole.log(arr2); //[1,2,3]\n```\n方式3：使用concat方法\n```angular2html\nvar arr1 = [1,2,3];\nvar arr2 = arr1.concat();\nconsole.log(arr2); //[1,2,3]\n```\n方式4：使用map方法\n```\nvar arr1 = [2,3,4];\nvar arr2 = arr1.map(function(value){\nreturn value;  \n})\nconsole.log(arr2);  //[2,3,4]\n```\n方式5：ES6扩展运算符\n```angular2html\n  var arr = [1,2,3,4,5];\n  var [ ... arr2 ] = arr;\n  console.log(arr); //[1,2,3,4,5]\n  console.log(arr2); //[1,2,3,4,5]\n```\n方式6：for-in连原型链也一并复制的方法\n```angular2html\nvar arr = [1,2,3,4,5];\narr.prototype = 5;\nvar arr2 = [];\nfor(var a in arr) {\n  arr2[a] = arr[a];\n}\nconsole.log(arr2); // [1,2,3,4,5]\nconsole.log(arr2.prototype); // 5\n//之前的方法中新数组的prototype都是undefined\n```\n多维数组的深拷贝\n```angular2html\nvar arr = [[1,2],3,4,[5,6]];\nvar arr3 = JSON.parse(JSON.stringify(arr));  \nconsole.log(arr3) // [[1,2],3,4,[5,6]]\n```\n#### 对象深拷贝\n方式1：手动复制\n```angular2html\nvar obj1 = { a: 10, b: 20, c: 30 };\nvar obj2 = { a: obj1.a, b: obj1.b, c: obj1.c };\nobj2.b = 100;\nconsole.log(obj1);\n// { a: 10, b: 20, c: 30 } // 沒被改到\nconsole.log(obj2);\n// { a: 10, b: 100, c: 30 }\n```\n方式2：JSON做字符串转换\n```angular2html\nvar obj1 = { body: { a: 10 } };\nvar obj2 = JSON.parse(JSON.stringify(obj1));\nobj2.body.a = 20;\nconsole.log(obj1);\n// { body: { a: 10 } }\nconsole.log(obj2);\n// { body: { a: 20 } }\nconsole.log(obj1 === obj2);\n// false\nconsole.log(obj1.body === obj2.body);\n```\n备注：这种方式简单易用，但是会抛弃对象的constructor，无论之前的构造函数是什么，拷贝后都是Object\n这种方法能正确处理的对象只有Number, String, Boolean, Array, 扁平对象，即那些能够被json直接表示的数据结构。RegExp对象是无法通过这种方式深拷贝。\n也就是说，只有可以转成JSON格式的对象才可以这样用，像function没办法转成JSON。\n方式3：递归拷贝\n```angular2html\nfunction deepClone(initalObj, finalObj) {    \n  var obj = finalObj || {};    \n  for (var i in initalObj) {        \n    var prop = initalObj[i];        // 避免相互引用对象导致死循环，如initalObj.a = initalObj的情况\n    if(prop === obj) {            \n      continue;\n    }        \n    if (typeof prop === 'object') {\n      obj[i] = (prop.constructor === Array) ? [] : {};            \n      arguments.callee(prop, obj[i]);\n    } else {\n      obj[i] = prop;\n    }\n  }    \n  return obj;\n}\nvar str = {};\nvar obj = { a: {a: \"hello\", b: 21} };\ndeepClone(obj, str);\nconsole.log(str.a);\n```","slug":"js_basic/02-js-copy","published":1,"date":"2021-02-26T11:01:03.194Z","updated":"2021-02-26T11:33:19.414Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklremxpl0003ndvp58odfjrf","content":"<h3><span id=\"js数据类型\">js数据类型</span></h3><p>js数据类型包含基本数据类型(String,Number,Boolean,Null,Undefined)和引用数据类型(Array,Object,Function)</p>\n<h3><span id=\"堆内存和栈内存\">堆内存和栈内存</span></h3><p>1、栈内存中存放的是存储对象的地址，而堆内存中存放的是存储对象的具体内容。<br>2、基本数据类型的地址和具体值都存在于栈内存中，引用数据类型的地址存在于栈内存中，而具体内容存在在堆内存中。<br>3、栈内存运行效率比堆内存高，空间相对堆内存来说较小。所以将构造简单的原始类型值放在栈内存中，将构造复杂的引用类型值放在堆中而不影响栈的效率。</p>\n<h3><span id=\"浅拷贝与深拷贝\">浅拷贝与深拷贝</span></h3><p>浅拷贝：复制一份引用，所有引用对象都指向一份数据，且都可以修改这份数据。<br>深拷贝：复制变量值，对于非基本类型的变量，则递归至基本类型变量后，再复制。</p>\n<h3><span id=\"浅拷贝\">浅拷贝</span></h3><h4><span id=\"数组的浅拷贝\">数组的浅拷贝</span></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr1 &#x3D; [1,2,3];</span><br><span class=\"line\">let arr2 &#x3D; arr1;</span><br><span class=\"line\">arr1[0] &#x3D; 2;</span><br><span class=\"line\">console.log(arr1[0]);  &#x2F;&#x2F;2</span><br></pre></td></tr></table></figure>\n<h4><span id=\"对象的浅拷贝\">对象的浅拷贝</span></h4><p>方式1：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let srcObj &#x3D; &#123;&#39;name&#39;: &#39;lilei&#39;, &#39;age&#39;: &#39;20&#39;&#125;;</span><br><span class=\"line\">let copyObj &#x3D; srcObj;</span><br><span class=\"line\">copyObj.age &#x3D; &#39;22&#39;;</span><br><span class=\"line\">console.log(&#39;srcObj&#39;, srcObj);   &#x2F;&#x2F; srcObj &#123; name: &#39;lilei&#39;, age: &#39;22&#39; &#125;</span><br><span class=\"line\">console.log(&#39;copyObj&#39;, copyObj);  &#x2F;&#x2F; copyObj &#123; name: &#39;lilei&#39;, age: &#39;22&#39; &#125;</span><br></pre></td></tr></table></figure>\n<p>方式2：Object.assign<br>可以处理对象属性为简单类型的深拷贝</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let srcObj &#x3D; &#123;&#39;name&#39;: &#39;lilei&#39;, &#39;age&#39;: &#39;20&#39;&#125;;</span><br><span class=\"line\">let copyObj2 &#x3D; Object.assign(&#123;&#125;, srcObj, &#123;&#39;age&#39;: &#39;21&#39;&#125;);</span><br><span class=\"line\">copyObj2.age &#x3D; &#39;23&#39;;</span><br><span class=\"line\">console.log(&#39;srcObj&#39;, srcObj); &#x2F;&#x2F;&#123; name: &#39;lilei&#39;, age: &#39;20&#39; &#125;</span><br></pre></td></tr></table></figure>\n<p>不能处理对象属性为引用类型，则那对于这个对象而言其实是浅拷贝的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj &#x3D; &#123; a: &#123;a: &quot;hello&quot;, b: 21&#125; &#125;;</span><br><span class=\"line\">var initalObj &#x3D; Object.assign(&#123;&#125;, obj);</span><br><span class=\"line\">initalObj.a.a &#x3D; &quot;changed&quot;;</span><br><span class=\"line\">console.log(obj.a.a); &#x2F;&#x2F; &quot;changed&quot;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"深拷贝\">深拷贝</span></h3><h4><span id=\"数组深拷贝\">数组深拷贝</span></h4><p>方式1：直接遍历赋值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr1 &#x3D; [1,3,5];</span><br><span class=\"line\">var arr2 &#x3D; [];</span><br><span class=\"line\">arr1.forEach(function(value,index)&#123;</span><br><span class=\"line\">arr2[index] &#x3D; value;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">console.log(arr2);</span><br><span class=\"line\">&#x2F;&#x2F;这个时候改变arr1[0]  &#x3D; 3;那么输出arr2[0]还是等于1</span><br></pre></td></tr></table></figure>\n<p>方式2：使用slice方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr1 &#x3D; [1,2,3];</span><br><span class=\"line\">var arr2 &#x3D; arr1.slice(0);</span><br><span class=\"line\">console.log(arr2); &#x2F;&#x2F;[1,2,3]</span><br></pre></td></tr></table></figure>\n<p>方式3：使用concat方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr1 &#x3D; [1,2,3];</span><br><span class=\"line\">var arr2 &#x3D; arr1.concat();</span><br><span class=\"line\">console.log(arr2); &#x2F;&#x2F;[1,2,3]</span><br></pre></td></tr></table></figure>\n<p>方式4：使用map方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr1 &#x3D; [2,3,4];</span><br><span class=\"line\">var arr2 &#x3D; arr1.map(function(value)&#123;</span><br><span class=\"line\">return value;  </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">console.log(arr2);  &#x2F;&#x2F;[2,3,4]</span><br></pre></td></tr></table></figure>\n<p>方式5：ES6扩展运算符</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr &#x3D; [1,2,3,4,5];</span><br><span class=\"line\">var [ ... arr2 ] &#x3D; arr;</span><br><span class=\"line\">console.log(arr); &#x2F;&#x2F;[1,2,3,4,5]</span><br><span class=\"line\">console.log(arr2); &#x2F;&#x2F;[1,2,3,4,5]</span><br></pre></td></tr></table></figure>\n<p>方式6：for-in连原型链也一并复制的方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr &#x3D; [1,2,3,4,5];</span><br><span class=\"line\">arr.prototype &#x3D; 5;</span><br><span class=\"line\">var arr2 &#x3D; [];</span><br><span class=\"line\">for(var a in arr) &#123;</span><br><span class=\"line\">  arr2[a] &#x3D; arr[a];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(arr2); &#x2F;&#x2F; [1,2,3,4,5]</span><br><span class=\"line\">console.log(arr2.prototype); &#x2F;&#x2F; 5</span><br><span class=\"line\">&#x2F;&#x2F;之前的方法中新数组的prototype都是undefined</span><br></pre></td></tr></table></figure>\n<p>多维数组的深拷贝</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr &#x3D; [[1,2],3,4,[5,6]];</span><br><span class=\"line\">var arr3 &#x3D; JSON.parse(JSON.stringify(arr));  </span><br><span class=\"line\">console.log(arr3) &#x2F;&#x2F; [[1,2],3,4,[5,6]]</span><br></pre></td></tr></table></figure>\n<h4><span id=\"对象深拷贝\">对象深拷贝</span></h4><p>方式1：手动复制</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj1 &#x3D; &#123; a: 10, b: 20, c: 30 &#125;;</span><br><span class=\"line\">var obj2 &#x3D; &#123; a: obj1.a, b: obj1.b, c: obj1.c &#125;;</span><br><span class=\"line\">obj2.b &#x3D; 100;</span><br><span class=\"line\">console.log(obj1);</span><br><span class=\"line\">&#x2F;&#x2F; &#123; a: 10, b: 20, c: 30 &#125; &#x2F;&#x2F; 沒被改到</span><br><span class=\"line\">console.log(obj2);</span><br><span class=\"line\">&#x2F;&#x2F; &#123; a: 10, b: 100, c: 30 &#125;</span><br></pre></td></tr></table></figure>\n<p>方式2：JSON做字符串转换</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj1 &#x3D; &#123; body: &#123; a: 10 &#125; &#125;;</span><br><span class=\"line\">var obj2 &#x3D; JSON.parse(JSON.stringify(obj1));</span><br><span class=\"line\">obj2.body.a &#x3D; 20;</span><br><span class=\"line\">console.log(obj1);</span><br><span class=\"line\">&#x2F;&#x2F; &#123; body: &#123; a: 10 &#125; &#125;</span><br><span class=\"line\">console.log(obj2);</span><br><span class=\"line\">&#x2F;&#x2F; &#123; body: &#123; a: 20 &#125; &#125;</span><br><span class=\"line\">console.log(obj1 &#x3D;&#x3D;&#x3D; obj2);</span><br><span class=\"line\">&#x2F;&#x2F; false</span><br><span class=\"line\">console.log(obj1.body &#x3D;&#x3D;&#x3D; obj2.body);</span><br></pre></td></tr></table></figure>\n<p>备注：这种方式简单易用，但是会抛弃对象的constructor，无论之前的构造函数是什么，拷贝后都是Object<br>这种方法能正确处理的对象只有Number, String, Boolean, Array, 扁平对象，即那些能够被json直接表示的数据结构。RegExp对象是无法通过这种方式深拷贝。<br>也就是说，只有可以转成JSON格式的对象才可以这样用，像function没办法转成JSON。<br>方式3：递归拷贝</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function deepClone(initalObj, finalObj) &#123;    </span><br><span class=\"line\">  var obj &#x3D; finalObj || &#123;&#125;;    </span><br><span class=\"line\">  for (var i in initalObj) &#123;        </span><br><span class=\"line\">    var prop &#x3D; initalObj[i];        &#x2F;&#x2F; 避免相互引用对象导致死循环，如initalObj.a &#x3D; initalObj的情况</span><br><span class=\"line\">    if(prop &#x3D;&#x3D;&#x3D; obj) &#123;            </span><br><span class=\"line\">      continue;</span><br><span class=\"line\">    &#125;        </span><br><span class=\"line\">    if (typeof prop &#x3D;&#x3D;&#x3D; &#39;object&#39;) &#123;</span><br><span class=\"line\">      obj[i] &#x3D; (prop.constructor &#x3D;&#x3D;&#x3D; Array) ? [] : &#123;&#125;;            </span><br><span class=\"line\">      arguments.callee(prop, obj[i]);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      obj[i] &#x3D; prop;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;    </span><br><span class=\"line\">  return obj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var str &#x3D; &#123;&#125;;</span><br><span class=\"line\">var obj &#x3D; &#123; a: &#123;a: &quot;hello&quot;, b: 21&#125; &#125;;</span><br><span class=\"line\">deepClone(obj, str);</span><br><span class=\"line\">console.log(str.a);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"js数据类型\"><a href=\"#js数据类型\" class=\"headerlink\" title=\"js数据类型\"></a>js数据类型</h3><p>js数据类型包含基本数据类型(String,Number,Boolean,Null,Undefined)和引用数据类型(Array,Object,Function)</p>\n<h3 id=\"堆内存和栈内存\"><a href=\"#堆内存和栈内存\" class=\"headerlink\" title=\"堆内存和栈内存\"></a>堆内存和栈内存</h3><p>1、栈内存中存放的是存储对象的地址，而堆内存中存放的是存储对象的具体内容。<br>2、基本数据类型的地址和具体值都存在于栈内存中，引用数据类型的地址存在于栈内存中，而具体内容存在在堆内存中。<br>3、栈内存运行效率比堆内存高，空间相对堆内存来说较小。所以将构造简单的原始类型值放在栈内存中，将构造复杂的引用类型值放在堆中而不影响栈的效率。</p>\n<h3 id=\"浅拷贝与深拷贝\"><a href=\"#浅拷贝与深拷贝\" class=\"headerlink\" title=\"浅拷贝与深拷贝\"></a>浅拷贝与深拷贝</h3><p>浅拷贝：复制一份引用，所有引用对象都指向一份数据，且都可以修改这份数据。<br>深拷贝：复制变量值，对于非基本类型的变量，则递归至基本类型变量后，再复制。</p>\n<h3 id=\"浅拷贝\"><a href=\"#浅拷贝\" class=\"headerlink\" title=\"浅拷贝\"></a>浅拷贝</h3><h4 id=\"数组的浅拷贝\"><a href=\"#数组的浅拷贝\" class=\"headerlink\" title=\"数组的浅拷贝\"></a>数组的浅拷贝</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr1 &#x3D; [1,2,3];</span><br><span class=\"line\">let arr2 &#x3D; arr1;</span><br><span class=\"line\">arr1[0] &#x3D; 2;</span><br><span class=\"line\">console.log(arr1[0]);  &#x2F;&#x2F;2</span><br></pre></td></tr></table></figure>\n<h4 id=\"对象的浅拷贝\"><a href=\"#对象的浅拷贝\" class=\"headerlink\" title=\"对象的浅拷贝\"></a>对象的浅拷贝</h4><p>方式1：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let srcObj &#x3D; &#123;&#39;name&#39;: &#39;lilei&#39;, &#39;age&#39;: &#39;20&#39;&#125;;</span><br><span class=\"line\">let copyObj &#x3D; srcObj;</span><br><span class=\"line\">copyObj.age &#x3D; &#39;22&#39;;</span><br><span class=\"line\">console.log(&#39;srcObj&#39;, srcObj);   &#x2F;&#x2F; srcObj &#123; name: &#39;lilei&#39;, age: &#39;22&#39; &#125;</span><br><span class=\"line\">console.log(&#39;copyObj&#39;, copyObj);  &#x2F;&#x2F; copyObj &#123; name: &#39;lilei&#39;, age: &#39;22&#39; &#125;</span><br></pre></td></tr></table></figure>\n<p>方式2：Object.assign<br>可以处理对象属性为简单类型的深拷贝</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let srcObj &#x3D; &#123;&#39;name&#39;: &#39;lilei&#39;, &#39;age&#39;: &#39;20&#39;&#125;;</span><br><span class=\"line\">let copyObj2 &#x3D; Object.assign(&#123;&#125;, srcObj, &#123;&#39;age&#39;: &#39;21&#39;&#125;);</span><br><span class=\"line\">copyObj2.age &#x3D; &#39;23&#39;;</span><br><span class=\"line\">console.log(&#39;srcObj&#39;, srcObj); &#x2F;&#x2F;&#123; name: &#39;lilei&#39;, age: &#39;20&#39; &#125;</span><br></pre></td></tr></table></figure>\n<p>不能处理对象属性为引用类型，则那对于这个对象而言其实是浅拷贝的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj &#x3D; &#123; a: &#123;a: &quot;hello&quot;, b: 21&#125; &#125;;</span><br><span class=\"line\">var initalObj &#x3D; Object.assign(&#123;&#125;, obj);</span><br><span class=\"line\">initalObj.a.a &#x3D; &quot;changed&quot;;</span><br><span class=\"line\">console.log(obj.a.a); &#x2F;&#x2F; &quot;changed&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h3><h4 id=\"数组深拷贝\"><a href=\"#数组深拷贝\" class=\"headerlink\" title=\"数组深拷贝\"></a>数组深拷贝</h4><p>方式1：直接遍历赋值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr1 &#x3D; [1,3,5];</span><br><span class=\"line\">var arr2 &#x3D; [];</span><br><span class=\"line\">arr1.forEach(function(value,index)&#123;</span><br><span class=\"line\">arr2[index] &#x3D; value;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">console.log(arr2);</span><br><span class=\"line\">&#x2F;&#x2F;这个时候改变arr1[0]  &#x3D; 3;那么输出arr2[0]还是等于1</span><br></pre></td></tr></table></figure>\n<p>方式2：使用slice方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr1 &#x3D; [1,2,3];</span><br><span class=\"line\">var arr2 &#x3D; arr1.slice(0);</span><br><span class=\"line\">console.log(arr2); &#x2F;&#x2F;[1,2,3]</span><br></pre></td></tr></table></figure>\n<p>方式3：使用concat方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr1 &#x3D; [1,2,3];</span><br><span class=\"line\">var arr2 &#x3D; arr1.concat();</span><br><span class=\"line\">console.log(arr2); &#x2F;&#x2F;[1,2,3]</span><br></pre></td></tr></table></figure>\n<p>方式4：使用map方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr1 &#x3D; [2,3,4];</span><br><span class=\"line\">var arr2 &#x3D; arr1.map(function(value)&#123;</span><br><span class=\"line\">return value;  </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">console.log(arr2);  &#x2F;&#x2F;[2,3,4]</span><br></pre></td></tr></table></figure>\n<p>方式5：ES6扩展运算符</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr &#x3D; [1,2,3,4,5];</span><br><span class=\"line\">var [ ... arr2 ] &#x3D; arr;</span><br><span class=\"line\">console.log(arr); &#x2F;&#x2F;[1,2,3,4,5]</span><br><span class=\"line\">console.log(arr2); &#x2F;&#x2F;[1,2,3,4,5]</span><br></pre></td></tr></table></figure>\n<p>方式6：for-in连原型链也一并复制的方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr &#x3D; [1,2,3,4,5];</span><br><span class=\"line\">arr.prototype &#x3D; 5;</span><br><span class=\"line\">var arr2 &#x3D; [];</span><br><span class=\"line\">for(var a in arr) &#123;</span><br><span class=\"line\">  arr2[a] &#x3D; arr[a];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(arr2); &#x2F;&#x2F; [1,2,3,4,5]</span><br><span class=\"line\">console.log(arr2.prototype); &#x2F;&#x2F; 5</span><br><span class=\"line\">&#x2F;&#x2F;之前的方法中新数组的prototype都是undefined</span><br></pre></td></tr></table></figure>\n<p>多维数组的深拷贝</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr &#x3D; [[1,2],3,4,[5,6]];</span><br><span class=\"line\">var arr3 &#x3D; JSON.parse(JSON.stringify(arr));  </span><br><span class=\"line\">console.log(arr3) &#x2F;&#x2F; [[1,2],3,4,[5,6]]</span><br></pre></td></tr></table></figure>\n<h4 id=\"对象深拷贝\"><a href=\"#对象深拷贝\" class=\"headerlink\" title=\"对象深拷贝\"></a>对象深拷贝</h4><p>方式1：手动复制</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj1 &#x3D; &#123; a: 10, b: 20, c: 30 &#125;;</span><br><span class=\"line\">var obj2 &#x3D; &#123; a: obj1.a, b: obj1.b, c: obj1.c &#125;;</span><br><span class=\"line\">obj2.b &#x3D; 100;</span><br><span class=\"line\">console.log(obj1);</span><br><span class=\"line\">&#x2F;&#x2F; &#123; a: 10, b: 20, c: 30 &#125; &#x2F;&#x2F; 沒被改到</span><br><span class=\"line\">console.log(obj2);</span><br><span class=\"line\">&#x2F;&#x2F; &#123; a: 10, b: 100, c: 30 &#125;</span><br></pre></td></tr></table></figure>\n<p>方式2：JSON做字符串转换</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj1 &#x3D; &#123; body: &#123; a: 10 &#125; &#125;;</span><br><span class=\"line\">var obj2 &#x3D; JSON.parse(JSON.stringify(obj1));</span><br><span class=\"line\">obj2.body.a &#x3D; 20;</span><br><span class=\"line\">console.log(obj1);</span><br><span class=\"line\">&#x2F;&#x2F; &#123; body: &#123; a: 10 &#125; &#125;</span><br><span class=\"line\">console.log(obj2);</span><br><span class=\"line\">&#x2F;&#x2F; &#123; body: &#123; a: 20 &#125; &#125;</span><br><span class=\"line\">console.log(obj1 &#x3D;&#x3D;&#x3D; obj2);</span><br><span class=\"line\">&#x2F;&#x2F; false</span><br><span class=\"line\">console.log(obj1.body &#x3D;&#x3D;&#x3D; obj2.body);</span><br></pre></td></tr></table></figure>\n<p>备注：这种方式简单易用，但是会抛弃对象的constructor，无论之前的构造函数是什么，拷贝后都是Object<br>这种方法能正确处理的对象只有Number, String, Boolean, Array, 扁平对象，即那些能够被json直接表示的数据结构。RegExp对象是无法通过这种方式深拷贝。<br>也就是说，只有可以转成JSON格式的对象才可以这样用，像function没办法转成JSON。<br>方式3：递归拷贝</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function deepClone(initalObj, finalObj) &#123;    </span><br><span class=\"line\">  var obj &#x3D; finalObj || &#123;&#125;;    </span><br><span class=\"line\">  for (var i in initalObj) &#123;        </span><br><span class=\"line\">    var prop &#x3D; initalObj[i];        &#x2F;&#x2F; 避免相互引用对象导致死循环，如initalObj.a &#x3D; initalObj的情况</span><br><span class=\"line\">    if(prop &#x3D;&#x3D;&#x3D; obj) &#123;            </span><br><span class=\"line\">      continue;</span><br><span class=\"line\">    &#125;        </span><br><span class=\"line\">    if (typeof prop &#x3D;&#x3D;&#x3D; &#39;object&#39;) &#123;</span><br><span class=\"line\">      obj[i] &#x3D; (prop.constructor &#x3D;&#x3D;&#x3D; Array) ? [] : &#123;&#125;;            </span><br><span class=\"line\">      arguments.callee(prop, obj[i]);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      obj[i] &#x3D; prop;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;    </span><br><span class=\"line\">  return obj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var str &#x3D; &#123;&#125;;</span><br><span class=\"line\">var obj &#x3D; &#123; a: &#123;a: &quot;hello&quot;, b: 21&#125; &#125;;</span><br><span class=\"line\">deepClone(obj, str);</span><br><span class=\"line\">console.log(str.a);</span><br></pre></td></tr></table></figure>"},{"title":"深入浅出Node","_content":"### Node简介\n1. Node的结构与Chrome十分相似，它们都是基于事件驱动的异步架构，浏览器通过事件驱动来服务界面上的交互，Node通过事件驱动来服务IO。\n2. Node的特点\n- 异步I/O\n- 事件与回调函数（事件的编程方式具有轻量级、松耦合、只关注事务点等有事，但是多个异步任务的场景下事件与事件相互独立，如何协作是一个问题。）\n- 单线程（单线程不用在意状态的同步问题，没有死锁，也没有上下文切换带来的性能开销，但是也有无法利用多核CPU、错误会导致整个应用退出、大量计算占用CPU导致无法继续调用异步I/O。Node通过child_process子进程讲计算来利用多核CPU）\n- 跨平台（基于libuv实现了跨平台）\n3. Node的应用场景\n- I/O密集型（面向网络且擅长并行I/O，优势在于Node利用事件循环的处理能力，而不是为每一个请求启动一个线程）。\n- 是否不擅长CPU密集型任务（如果有长时间运行的计算会导致CPU时间片不能释放，后续I/O无法发起。但是只要适当调整和分解大型运算任务为多个小任务，使运算可以适时释放，不阻塞I/O调用发起）\n4. Node的使用者的倚重点\n- 前后端编程语言环境统一\n- Node带来的高性能I/O用于实时应用\n- 并行I/O使得使用者可以更高效利用分布式环境\n- 并行I/O有效利用稳定借口提升Web渲染能力\n- 云计算平台提供Node支持\n- 工具类应用\n\n### 模块机制\n#### CommonJS规范\nCommonJS规范的提出，主要为了弥补当前JS没有标准的缺陷，达到具备开发大型应用的基础能力。\n模块规范\n- 模块引用\n```angular2\nvar math = require('math');\n```\n- 模块定义\n上下文提供了exports对象用于导出当前模块的方法或者变量，并且它是唯一导出的出口。在模块中，还存在一个module对象，代表模块自身，exports是module的属性。\n- 模块标识\n模块标识就是传递给require()方法的参数，必须符合小拖放命名的字符串，或者相对路径or绝对路径。\n### Node的模块实现\n1. Node中引入模块，需要路径分析、文件定位、编译执行三个步骤。\n2. Node中模块分为两类，一类是Node提供的模块称为核心模块。另一类是用户编写的模块，称为文件模块。\n    - 核心模块部分在Node源代码的编译过程中，编译进了二进制执行文件。在Node进程启动时，这部分核心模块被直接加载进内存，就可以省略文件定位和编译执行步骤，路径分析中优先判断\n    - 文件模块在运行时动态加载，需要三个步骤，会慢一些\n3. Node对引入过的模块都会进行缓存，缓存的是编译和执行之后的对象。无论核心模块还是文件模块，都是优先采用缓存。核心模块的缓存检查先于文件模块的缓存检查。\n4. 路径分析和文件定位\n###### 模块标识符分析：\n - 模块加载速度：缓存模块<核心模块<路径形式的文件模块<自定义模块\n###### 文件定位分析：\n - 文件扩展名分析，Node会按照.js .json .node的次序补足扩展名，依次尝试。尝试过程中，需要调用fs模块同步阻塞式地判断文件是否存在。\n - 目录分析和包：分析标识符查找到一个目录，Node会当成一个包来处理。会去查找包里面是否有package.json，取出main属性指定的文件来定位。\n如果main属性指定文件名错误，会将index当做默认文件名。如果这一级目录还没有找到，会下一个模块路径进行遍历。如果所有模块路径都找不到，就跑出查找失败的异常。\n###### 模块编译：\n编译和执行是引入文件模块的最后一个阶段。定位到具体的文件后，Node会新建一个模块对象，根据路径载入并编译。\n不同文件名载入方法有所不同\n  - .js 通过fs模块同步读取文件后编译执行。\n  - .node C/C++编写的扩展文件，通过dlopen()方法加载最后编译生成的文件\n  - .json 通过fs模块同步读取文件后，用JSON.parse()解析返回结果\n  - 其余扩展名，被当做js文件载入\n每一个编译成功的模块都会将其文件路径作为索引缓存在Module._cache对象上，以提高二次引入的性能\n##### JS模块的编译\n在编译的过程中，Node对获取的JavaScript文件内容进行了头尾包装。\n```angular2\n(function (exports, require, module, _filename, _dirname) { // 新增行\n  var math = require('math');\n  exports.area = function (radius) {\n    return Math.PI * radius * radius;\n  };\n}); // 新增行\n```\n通过新增了头和尾，进行了作用域隔离，包装之后的代码会通过vm原生模块的runInThisContext()方法执行，返回一个具体的function对象。\n最后把当前模块对象的exports属性、require()方法、module及在文件定位中得到的完整的文件路径和文件目录作为参数传入function()执行。\n执行之后，模块的exports属性被返回给了调用方。\nexports对象是通过形参的方式传入的，直接复制会改变形参的引用，但不会改变作用域外的值，因此需要用module.exports迂回一下。\n##### C/C++模块的编译\nNode调用process.dlopen()方法进行加载和执行。dlopen()方法在不同平台不同实现，通过libuv兼容层进行了封装。\n实际上node的模块文件并不需要编译，因为已经是编译生成的，所以只有加载和执行的过程。\n在执行的过程中，模块的exports对象与.node模块产生联系，然后返回给调用者。\nC/C++模块执行效率快，但是入门门槛高。\n##### JSON文件的编译\n利用fs模块同步读取JSON文件的内容之后，调用JSON.parse()方法得到对象，在赋给模块对象的exports，供外部调用。\n\n\n\n\n","source":"_posts/nodejs/01-Node简介.md","raw":"---\ntitle: 深入浅出Node\n---\n### Node简介\n1. Node的结构与Chrome十分相似，它们都是基于事件驱动的异步架构，浏览器通过事件驱动来服务界面上的交互，Node通过事件驱动来服务IO。\n2. Node的特点\n- 异步I/O\n- 事件与回调函数（事件的编程方式具有轻量级、松耦合、只关注事务点等有事，但是多个异步任务的场景下事件与事件相互独立，如何协作是一个问题。）\n- 单线程（单线程不用在意状态的同步问题，没有死锁，也没有上下文切换带来的性能开销，但是也有无法利用多核CPU、错误会导致整个应用退出、大量计算占用CPU导致无法继续调用异步I/O。Node通过child_process子进程讲计算来利用多核CPU）\n- 跨平台（基于libuv实现了跨平台）\n3. Node的应用场景\n- I/O密集型（面向网络且擅长并行I/O，优势在于Node利用事件循环的处理能力，而不是为每一个请求启动一个线程）。\n- 是否不擅长CPU密集型任务（如果有长时间运行的计算会导致CPU时间片不能释放，后续I/O无法发起。但是只要适当调整和分解大型运算任务为多个小任务，使运算可以适时释放，不阻塞I/O调用发起）\n4. Node的使用者的倚重点\n- 前后端编程语言环境统一\n- Node带来的高性能I/O用于实时应用\n- 并行I/O使得使用者可以更高效利用分布式环境\n- 并行I/O有效利用稳定借口提升Web渲染能力\n- 云计算平台提供Node支持\n- 工具类应用\n\n### 模块机制\n#### CommonJS规范\nCommonJS规范的提出，主要为了弥补当前JS没有标准的缺陷，达到具备开发大型应用的基础能力。\n模块规范\n- 模块引用\n```angular2\nvar math = require('math');\n```\n- 模块定义\n上下文提供了exports对象用于导出当前模块的方法或者变量，并且它是唯一导出的出口。在模块中，还存在一个module对象，代表模块自身，exports是module的属性。\n- 模块标识\n模块标识就是传递给require()方法的参数，必须符合小拖放命名的字符串，或者相对路径or绝对路径。\n### Node的模块实现\n1. Node中引入模块，需要路径分析、文件定位、编译执行三个步骤。\n2. Node中模块分为两类，一类是Node提供的模块称为核心模块。另一类是用户编写的模块，称为文件模块。\n    - 核心模块部分在Node源代码的编译过程中，编译进了二进制执行文件。在Node进程启动时，这部分核心模块被直接加载进内存，就可以省略文件定位和编译执行步骤，路径分析中优先判断\n    - 文件模块在运行时动态加载，需要三个步骤，会慢一些\n3. Node对引入过的模块都会进行缓存，缓存的是编译和执行之后的对象。无论核心模块还是文件模块，都是优先采用缓存。核心模块的缓存检查先于文件模块的缓存检查。\n4. 路径分析和文件定位\n###### 模块标识符分析：\n - 模块加载速度：缓存模块<核心模块<路径形式的文件模块<自定义模块\n###### 文件定位分析：\n - 文件扩展名分析，Node会按照.js .json .node的次序补足扩展名，依次尝试。尝试过程中，需要调用fs模块同步阻塞式地判断文件是否存在。\n - 目录分析和包：分析标识符查找到一个目录，Node会当成一个包来处理。会去查找包里面是否有package.json，取出main属性指定的文件来定位。\n如果main属性指定文件名错误，会将index当做默认文件名。如果这一级目录还没有找到，会下一个模块路径进行遍历。如果所有模块路径都找不到，就跑出查找失败的异常。\n###### 模块编译：\n编译和执行是引入文件模块的最后一个阶段。定位到具体的文件后，Node会新建一个模块对象，根据路径载入并编译。\n不同文件名载入方法有所不同\n  - .js 通过fs模块同步读取文件后编译执行。\n  - .node C/C++编写的扩展文件，通过dlopen()方法加载最后编译生成的文件\n  - .json 通过fs模块同步读取文件后，用JSON.parse()解析返回结果\n  - 其余扩展名，被当做js文件载入\n每一个编译成功的模块都会将其文件路径作为索引缓存在Module._cache对象上，以提高二次引入的性能\n##### JS模块的编译\n在编译的过程中，Node对获取的JavaScript文件内容进行了头尾包装。\n```angular2\n(function (exports, require, module, _filename, _dirname) { // 新增行\n  var math = require('math');\n  exports.area = function (radius) {\n    return Math.PI * radius * radius;\n  };\n}); // 新增行\n```\n通过新增了头和尾，进行了作用域隔离，包装之后的代码会通过vm原生模块的runInThisContext()方法执行，返回一个具体的function对象。\n最后把当前模块对象的exports属性、require()方法、module及在文件定位中得到的完整的文件路径和文件目录作为参数传入function()执行。\n执行之后，模块的exports属性被返回给了调用方。\nexports对象是通过形参的方式传入的，直接复制会改变形参的引用，但不会改变作用域外的值，因此需要用module.exports迂回一下。\n##### C/C++模块的编译\nNode调用process.dlopen()方法进行加载和执行。dlopen()方法在不同平台不同实现，通过libuv兼容层进行了封装。\n实际上node的模块文件并不需要编译，因为已经是编译生成的，所以只有加载和执行的过程。\n在执行的过程中，模块的exports对象与.node模块产生联系，然后返回给调用者。\nC/C++模块执行效率快，但是入门门槛高。\n##### JSON文件的编译\n利用fs模块同步读取JSON文件的内容之后，调用JSON.parse()方法得到对象，在赋给模块对象的exports，供外部调用。\n\n\n\n\n","slug":"nodejs/01-Node简介","published":1,"date":"2021-03-01T08:10:55.198Z","updated":"2021-03-01T08:10:55.198Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklremxpm0004ndvpgss4eni2","content":"<h3><span id=\"node简介\">Node简介</span></h3><ol>\n<li>Node的结构与Chrome十分相似，它们都是基于事件驱动的异步架构，浏览器通过事件驱动来服务界面上的交互，Node通过事件驱动来服务IO。</li>\n<li>Node的特点</li>\n</ol>\n<ul>\n<li>异步I/O</li>\n<li>事件与回调函数（事件的编程方式具有轻量级、松耦合、只关注事务点等有事，但是多个异步任务的场景下事件与事件相互独立，如何协作是一个问题。）</li>\n<li>单线程（单线程不用在意状态的同步问题，没有死锁，也没有上下文切换带来的性能开销，但是也有无法利用多核CPU、错误会导致整个应用退出、大量计算占用CPU导致无法继续调用异步I/O。Node通过child_process子进程讲计算来利用多核CPU）</li>\n<li>跨平台（基于libuv实现了跨平台）</li>\n</ul>\n<ol start=\"3\">\n<li>Node的应用场景</li>\n</ol>\n<ul>\n<li>I/O密集型（面向网络且擅长并行I/O，优势在于Node利用事件循环的处理能力，而不是为每一个请求启动一个线程）。</li>\n<li>是否不擅长CPU密集型任务（如果有长时间运行的计算会导致CPU时间片不能释放，后续I/O无法发起。但是只要适当调整和分解大型运算任务为多个小任务，使运算可以适时释放，不阻塞I/O调用发起）</li>\n</ul>\n<ol start=\"4\">\n<li>Node的使用者的倚重点</li>\n</ol>\n<ul>\n<li>前后端编程语言环境统一</li>\n<li>Node带来的高性能I/O用于实时应用</li>\n<li>并行I/O使得使用者可以更高效利用分布式环境</li>\n<li>并行I/O有效利用稳定借口提升Web渲染能力</li>\n<li>云计算平台提供Node支持</li>\n<li>工具类应用</li>\n</ul>\n<h3><span id=\"模块机制\">模块机制</span></h3><h4><span id=\"commonjs规范\">CommonJS规范</span></h4><p>CommonJS规范的提出，主要为了弥补当前JS没有标准的缺陷，达到具备开发大型应用的基础能力。<br>模块规范</p>\n<ul>\n<li>模块引用<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var math &#x3D; require(&#39;math&#39;);</span><br></pre></td></tr></table></figure></li>\n<li>模块定义<br>上下文提供了exports对象用于导出当前模块的方法或者变量，并且它是唯一导出的出口。在模块中，还存在一个module对象，代表模块自身，exports是module的属性。</li>\n<li>模块标识<br>模块标识就是传递给require()方法的参数，必须符合小拖放命名的字符串，或者相对路径or绝对路径。<h3><span id=\"node的模块实现\">Node的模块实现</span></h3></li>\n</ul>\n<ol>\n<li>Node中引入模块，需要路径分析、文件定位、编译执行三个步骤。</li>\n<li>Node中模块分为两类，一类是Node提供的模块称为核心模块。另一类是用户编写的模块，称为文件模块。<ul>\n<li>核心模块部分在Node源代码的编译过程中，编译进了二进制执行文件。在Node进程启动时，这部分核心模块被直接加载进内存，就可以省略文件定位和编译执行步骤，路径分析中优先判断</li>\n<li>文件模块在运行时动态加载，需要三个步骤，会慢一些</li>\n</ul>\n</li>\n<li>Node对引入过的模块都会进行缓存，缓存的是编译和执行之后的对象。无论核心模块还是文件模块，都是优先采用缓存。核心模块的缓存检查先于文件模块的缓存检查。</li>\n<li>路径分析和文件定位<h6><span id=\"模块标识符分析\">模块标识符分析：</span></h6></li>\n</ol>\n<ul>\n<li>模块加载速度：缓存模块&lt;核心模块&lt;路径形式的文件模块&lt;自定义模块<h6><span id=\"文件定位分析\">文件定位分析：</span></h6></li>\n<li>文件扩展名分析，Node会按照.js .json .node的次序补足扩展名，依次尝试。尝试过程中，需要调用fs模块同步阻塞式地判断文件是否存在。</li>\n<li>目录分析和包：分析标识符查找到一个目录，Node会当成一个包来处理。会去查找包里面是否有package.json，取出main属性指定的文件来定位。<br>如果main属性指定文件名错误，会将index当做默认文件名。如果这一级目录还没有找到，会下一个模块路径进行遍历。如果所有模块路径都找不到，就跑出查找失败的异常。<h6><span id=\"模块编译\">模块编译：</span></h6>编译和执行是引入文件模块的最后一个阶段。定位到具体的文件后，Node会新建一个模块对象，根据路径载入并编译。<br>不同文件名载入方法有所不同</li>\n<li>.js 通过fs模块同步读取文件后编译执行。</li>\n<li>.node C/C++编写的扩展文件，通过dlopen()方法加载最后编译生成的文件</li>\n<li>.json 通过fs模块同步读取文件后，用JSON.parse()解析返回结果</li>\n<li>其余扩展名，被当做js文件载入<br>每一个编译成功的模块都会将其文件路径作为索引缓存在Module._cache对象上，以提高二次引入的性能<h5><span id=\"js模块的编译\">JS模块的编译</span></h5>在编译的过程中，Node对获取的JavaScript文件内容进行了头尾包装。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function (exports, require, module, _filename, _dirname) &#123; &#x2F;&#x2F; 新增行</span><br><span class=\"line\">  var math &#x3D; require(&#39;math&#39;);</span><br><span class=\"line\">  exports.area &#x3D; function (radius) &#123;</span><br><span class=\"line\">    return Math.PI * radius * radius;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;); &#x2F;&#x2F; 新增行</span><br></pre></td></tr></table></figure>\n通过新增了头和尾，进行了作用域隔离，包装之后的代码会通过vm原生模块的runInThisContext()方法执行，返回一个具体的function对象。<br>最后把当前模块对象的exports属性、require()方法、module及在文件定位中得到的完整的文件路径和文件目录作为参数传入function()执行。<br>执行之后，模块的exports属性被返回给了调用方。<br>exports对象是通过形参的方式传入的，直接复制会改变形参的引用，但不会改变作用域外的值，因此需要用module.exports迂回一下。<h5><span id=\"cc模块的编译\">C/C++模块的编译</span></h5>Node调用process.dlopen()方法进行加载和执行。dlopen()方法在不同平台不同实现，通过libuv兼容层进行了封装。<br>实际上node的模块文件并不需要编译，因为已经是编译生成的，所以只有加载和执行的过程。<br>在执行的过程中，模块的exports对象与.node模块产生联系，然后返回给调用者。<br>C/C++模块执行效率快，但是入门门槛高。<h5><span id=\"json文件的编译\">JSON文件的编译</span></h5>利用fs模块同步读取JSON文件的内容之后，调用JSON.parse()方法得到对象，在赋给模块对象的exports，供外部调用。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Node简介\"><a href=\"#Node简介\" class=\"headerlink\" title=\"Node简介\"></a>Node简介</h3><ol>\n<li>Node的结构与Chrome十分相似，它们都是基于事件驱动的异步架构，浏览器通过事件驱动来服务界面上的交互，Node通过事件驱动来服务IO。</li>\n<li>Node的特点</li>\n</ol>\n<ul>\n<li>异步I/O</li>\n<li>事件与回调函数（事件的编程方式具有轻量级、松耦合、只关注事务点等有事，但是多个异步任务的场景下事件与事件相互独立，如何协作是一个问题。）</li>\n<li>单线程（单线程不用在意状态的同步问题，没有死锁，也没有上下文切换带来的性能开销，但是也有无法利用多核CPU、错误会导致整个应用退出、大量计算占用CPU导致无法继续调用异步I/O。Node通过child_process子进程讲计算来利用多核CPU）</li>\n<li>跨平台（基于libuv实现了跨平台）</li>\n</ul>\n<ol start=\"3\">\n<li>Node的应用场景</li>\n</ol>\n<ul>\n<li>I/O密集型（面向网络且擅长并行I/O，优势在于Node利用事件循环的处理能力，而不是为每一个请求启动一个线程）。</li>\n<li>是否不擅长CPU密集型任务（如果有长时间运行的计算会导致CPU时间片不能释放，后续I/O无法发起。但是只要适当调整和分解大型运算任务为多个小任务，使运算可以适时释放，不阻塞I/O调用发起）</li>\n</ul>\n<ol start=\"4\">\n<li>Node的使用者的倚重点</li>\n</ol>\n<ul>\n<li>前后端编程语言环境统一</li>\n<li>Node带来的高性能I/O用于实时应用</li>\n<li>并行I/O使得使用者可以更高效利用分布式环境</li>\n<li>并行I/O有效利用稳定借口提升Web渲染能力</li>\n<li>云计算平台提供Node支持</li>\n<li>工具类应用</li>\n</ul>\n<h3 id=\"模块机制\"><a href=\"#模块机制\" class=\"headerlink\" title=\"模块机制\"></a>模块机制</h3><h4 id=\"CommonJS规范\"><a href=\"#CommonJS规范\" class=\"headerlink\" title=\"CommonJS规范\"></a>CommonJS规范</h4><p>CommonJS规范的提出，主要为了弥补当前JS没有标准的缺陷，达到具备开发大型应用的基础能力。<br>模块规范</p>\n<ul>\n<li>模块引用<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var math &#x3D; require(&#39;math&#39;);</span><br></pre></td></tr></table></figure></li>\n<li>模块定义<br>上下文提供了exports对象用于导出当前模块的方法或者变量，并且它是唯一导出的出口。在模块中，还存在一个module对象，代表模块自身，exports是module的属性。</li>\n<li>模块标识<br>模块标识就是传递给require()方法的参数，必须符合小拖放命名的字符串，或者相对路径or绝对路径。<h3 id=\"Node的模块实现\"><a href=\"#Node的模块实现\" class=\"headerlink\" title=\"Node的模块实现\"></a>Node的模块实现</h3></li>\n</ul>\n<ol>\n<li>Node中引入模块，需要路径分析、文件定位、编译执行三个步骤。</li>\n<li>Node中模块分为两类，一类是Node提供的模块称为核心模块。另一类是用户编写的模块，称为文件模块。<ul>\n<li>核心模块部分在Node源代码的编译过程中，编译进了二进制执行文件。在Node进程启动时，这部分核心模块被直接加载进内存，就可以省略文件定位和编译执行步骤，路径分析中优先判断</li>\n<li>文件模块在运行时动态加载，需要三个步骤，会慢一些</li>\n</ul>\n</li>\n<li>Node对引入过的模块都会进行缓存，缓存的是编译和执行之后的对象。无论核心模块还是文件模块，都是优先采用缓存。核心模块的缓存检查先于文件模块的缓存检查。</li>\n<li>路径分析和文件定位<h6 id=\"模块标识符分析：\"><a href=\"#模块标识符分析：\" class=\"headerlink\" title=\"模块标识符分析：\"></a>模块标识符分析：</h6></li>\n</ol>\n<ul>\n<li>模块加载速度：缓存模块&lt;核心模块&lt;路径形式的文件模块&lt;自定义模块<h6 id=\"文件定位分析：\"><a href=\"#文件定位分析：\" class=\"headerlink\" title=\"文件定位分析：\"></a>文件定位分析：</h6></li>\n<li>文件扩展名分析，Node会按照.js .json .node的次序补足扩展名，依次尝试。尝试过程中，需要调用fs模块同步阻塞式地判断文件是否存在。</li>\n<li>目录分析和包：分析标识符查找到一个目录，Node会当成一个包来处理。会去查找包里面是否有package.json，取出main属性指定的文件来定位。<br>如果main属性指定文件名错误，会将index当做默认文件名。如果这一级目录还没有找到，会下一个模块路径进行遍历。如果所有模块路径都找不到，就跑出查找失败的异常。<h6 id=\"模块编译：\"><a href=\"#模块编译：\" class=\"headerlink\" title=\"模块编译：\"></a>模块编译：</h6>编译和执行是引入文件模块的最后一个阶段。定位到具体的文件后，Node会新建一个模块对象，根据路径载入并编译。<br>不同文件名载入方法有所不同</li>\n<li>.js 通过fs模块同步读取文件后编译执行。</li>\n<li>.node C/C++编写的扩展文件，通过dlopen()方法加载最后编译生成的文件</li>\n<li>.json 通过fs模块同步读取文件后，用JSON.parse()解析返回结果</li>\n<li>其余扩展名，被当做js文件载入<br>每一个编译成功的模块都会将其文件路径作为索引缓存在Module._cache对象上，以提高二次引入的性能<h5 id=\"JS模块的编译\"><a href=\"#JS模块的编译\" class=\"headerlink\" title=\"JS模块的编译\"></a>JS模块的编译</h5>在编译的过程中，Node对获取的JavaScript文件内容进行了头尾包装。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function (exports, require, module, _filename, _dirname) &#123; &#x2F;&#x2F; 新增行</span><br><span class=\"line\">  var math &#x3D; require(&#39;math&#39;);</span><br><span class=\"line\">  exports.area &#x3D; function (radius) &#123;</span><br><span class=\"line\">    return Math.PI * radius * radius;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;); &#x2F;&#x2F; 新增行</span><br></pre></td></tr></table></figure>\n通过新增了头和尾，进行了作用域隔离，包装之后的代码会通过vm原生模块的runInThisContext()方法执行，返回一个具体的function对象。<br>最后把当前模块对象的exports属性、require()方法、module及在文件定位中得到的完整的文件路径和文件目录作为参数传入function()执行。<br>执行之后，模块的exports属性被返回给了调用方。<br>exports对象是通过形参的方式传入的，直接复制会改变形参的引用，但不会改变作用域外的值，因此需要用module.exports迂回一下。<h5 id=\"C-C-模块的编译\"><a href=\"#C-C-模块的编译\" class=\"headerlink\" title=\"C/C++模块的编译\"></a>C/C++模块的编译</h5>Node调用process.dlopen()方法进行加载和执行。dlopen()方法在不同平台不同实现，通过libuv兼容层进行了封装。<br>实际上node的模块文件并不需要编译，因为已经是编译生成的，所以只有加载和执行的过程。<br>在执行的过程中，模块的exports对象与.node模块产生联系，然后返回给调用者。<br>C/C++模块执行效率快，但是入门门槛高。<h5 id=\"JSON文件的编译\"><a href=\"#JSON文件的编译\" class=\"headerlink\" title=\"JSON文件的编译\"></a>JSON文件的编译</h5>利用fs模块同步读取JSON文件的内容之后，调用JSON.parse()方法得到对象，在赋给模块对象的exports，供外部调用。</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}